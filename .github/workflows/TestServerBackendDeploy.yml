# name: Test server Backend
# run-name: ${{ github.actor }} - ${{ github.event.head_commit.message }} commit is running
# on:
#   workflow_dispatch:

# jobs:
#   BackendLintAndTest:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out repository code
#         uses: actions/checkout@v4
#         with:
#           repository: WonderWhyDev/wonderWhy
#           path: wonderWhy
#           token: ${{ secrets.REPO_READ_TOKEN }}
#       - uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'yarn'
#           cache-dependency-path: '**/yarn.lock'
#       - run: |
#           cd wonderWhy
#           yarn install
#           yarn b build
#       - name: Upload Dist
#         uses: actions/upload-artifact@v2
#         with:
#           name: dist-folder-backend
#           path: wonderWhy/backend/dist/

#   AutoDeployment:
#     runs-on: ubuntu-latest
#     needs: [BackendLintAndTest]
#     steps:
#       - name: Check out repository code
#         uses: actions/checkout@v4
#         with:
#           repository: WonderWhyDev/wonderWhy
#           path: wonderWhy
#           token: ${{ secrets.REPO_READ_TOKEN }}
#       - name: Download dist folder
#         uses: actions/download-artifact@v2
#         with:
#           name: dist-folder-backend
#           path: wonderWhy/backend/dist/        
#       - name: Get Runner IP
#         run: |
#           IP_ADDRESS=$(curl -s https://api.ipify.org)
#           echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

#       - name: Set Variables
#         run: echo "ELASTIC_IP=ec2-user@54.161.136.144" >> $GITHUB_ENV

#       - name: Configure AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Update Security Group
#         run: |
#           SECURITY_GROUP_ID="sg-06ac079bdce544635" 
#           IP_ADDRESS=${{ env.IP_ADDRESS }}
#           aws ec2 authorize-security-group-ingress \
#             --group-id $SECURITY_GROUP_ID \
#             --protocol tcp \
#             --port 22 \
#             --cidr ${IP_ADDRESS}/32

#       - name: Setup SSH Key
#         env:
#           SSH_PRIVATE_KEY_FOR_EC2: ${{ secrets.SSH_PRIVATE_KEY_FOR_EC2 }}
#         run: |
#             echo "$SSH_PRIVATE_KEY_FOR_EC2" > SSH_PRIVATE_KEY_FOR_EC2.pem
#             chmod 600 SSH_PRIVATE_KEY_FOR_EC2.pem

#       - name: Add remote host to known_hosts # Add this to Startup Scripts on Terraform
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H 54.161.136.144 >> ~/.ssh/known_hosts

#       - name: Clone Repository
#         run: |
#           rsync -avz -e 'ssh -i SSH_PRIVATE_KEY_FOR_EC2.pem -o StrictHostKeyChecking=no' /home/runner/work/deploy/deploy/wonderWhy ${{ env.ELASTIC_IP }}:~/

#       - name: Clone Dist Folder
#         run: rsync -avz -e 'ssh -i SSH_PRIVATE_KEY_FOR_EC2.pem' /home/runner/work/deploy/deploy/wonderWhy/backend/dist/*  ${{ env.ELASTIC_IP }}:~/wonderWhy/backend/dist/

#       - uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'yarn'
#           cache-dependency-path: '**/yarn.lock'  

#       - name: Start Docker Container
#         env:
#           CLIENT_ID: ${{ secrets.TEST_CLIENT_ID }}
#           CLIENT_SECRET: ${{ secrets.TEST_CLIENT_SECRET }}
#         run : |
#           ssh -t -i SSH_PRIVATE_KEY_FOR_EC2.pem ${{ env.ELASTIC_IP }}  << EOF
#             set -e
#             cd wonderWhy
#             sed -i '/^export CLIENT_ID=/d' ~/.bashrc
#             echo 'export CLIENT_ID=$CLIENT_ID' >> ~/.bashrc
#             sed -i '/^export CLIENT_SECRET=/d' ~/.bashrc
#             echo 'export CLIENT_SECRET=$CLIENT_SECRET' >> ~/.bashrc
#             source /home/ec2-user/.bashrc
#             docker-compose stop backend 
#             docker-compose up setup -d
#             docker-compose up backend -d
#           EOF
        
#       - name: Remove Added Security Group Rule
#         run: |
#           SECURITY_GROUP_ID="sg-06ac079bdce544635" 
#           aws ec2 revoke-security-group-ingress \
#             --group-id $SECURITY_GROUP_ID \
#             --protocol tcp \
#             --port 22 \
#             --cidr ${IP_ADDRESS}/32







###------------------ BELOW CODE WRITTEN FOR ZIPPING AND TRANSFERING THE CODE TO EC2 INSTANCE--------------------------------------###

name: Test server Backend
run-name: ${{ github.actor }} - ${{ github.event.head_commit.message }} commit is running
on:
  workflow_dispatch:

jobs:
  BackendLintAndTest:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          repository: WonderWhyDev/wonderWhy
          path: wonderWhy
          token: ${{ secrets.REPO_READ_TOKEN }}
        
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
      - run: |
          cd wonderWhy
          yarn install
          yarn b build
      - name: Upload Dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-folder-backend
          path: wonderWhy/backend/dist/

  AutoDeployment:
    runs-on: ubuntu-latest
    needs: [BackendLintAndTest]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          repository: WonderWhyDev/wonderWhy
          path: wonderWhy
          token: ${{ secrets.REPO_READ_TOKEN }}
          ref: test_server_deploy
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-folder-backend
          path: wonderWhy/backend/dist/        
      - name: Get Runner IP
        run: |
          IP_ADDRESS=$(curl -s https://api.ipify.org)
          echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

      - name: Set Variables
        run: echo "ELASTIC_IP=ec2-user@3.227.166.26" >> $GITHUB_ENV

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update Security Group
        run: |
          SECURITY_GROUP_ID="sg-0c78d4025e3337f81" 
          IP_ADDRESS=${{ env.IP_ADDRESS }}
          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${IP_ADDRESS}/32

      - name: Setup SSH Key
        env:
          SSH_PRIVATE_KEY_FOR_EC2: ${{ secrets.SSH_PRIVATE_KEY_FOR_EC2 }}
        run: |
            echo "$SSH_PRIVATE_KEY_FOR_EC2" > SSH_PRIVATE_KEY_FOR_EC2.pem
            chmod 600 SSH_PRIVATE_KEY_FOR_EC2.pem

      - name: Add remote host to known_hosts # Add this to Startup Scripts on Terraform
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 3.227.166.26 >> ~/.ssh/known_hosts

      - name: Zip wonderWhy Folder
        run: |
          cd "/home/runner/work/wonderMoveDeploy/wonderMoveDeploy/wonderWhy" && zip -r wonderWhy.zip .
            
      - name: Transfer ZIP Files to EC2
        run: |
          ssh -i SSH_PRIVATE_KEY_FOR_EC2.pem ${{ env.ELASTIC_IP }} << 'EOF'
          mkdir -p ~/wonderWhy
          sudo rm -rf ~/wonderWhy/*
          EOF
          rsync -avz -e 'ssh -i SSH_PRIVATE_KEY_FOR_EC2.pem' /home/runner/work/wonderMoveDeploy/wonderMoveDeploy/wonderWhy/wonderWhy.zip ${{ env.ELASTIC_IP }}:~/wonderWhy
          
      - name: Extract ZIP Files and Clean Up on EC2
        run: |
          ssh -i SSH_PRIVATE_KEY_FOR_EC2.pem -o StrictHostKeyChecking=no ${{ env.ELASTIC_IP }} << 'EOF'
          unzip -o ~/wonderWhy/wonderWhy.zip -d ~/wonderWhy
          rm -f ~/wonderWhy/wonderWhy.zip
          EOF

      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'  

      - name: Start Docker Container
        env:
          CLIENT_ID: ${{ secrets.TEST_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.TEST_CLIENT_SECRET }}
        run : |
          ssh -t -i SSH_PRIVATE_KEY_FOR_EC2.pem ${{ env.ELASTIC_IP }}  << EOF
            set -e
            cd wonderWhy/backend
            sed -i '/^export CLIENT_ID=/d' ~/.bashrc
            echo 'export CLIENT_ID=$CLIENT_ID' >> ~/.bashrc
            sed -i '/^export CLIENT_SECRET=/d' ~/.bashrc
            echo 'export CLIENT_SECRET=$CLIENT_SECRET' >> ~/.bashrc
            source /home/ec2-user/.bashrc

            if ! docker network inspect "wonderwhy_postgres-network" >/dev/null 2>&1; then
              echo "Creating Docker network: wonderwhy_postgres-network"
              docker network create "wonderwhy_postgres-network"
            else
              echo "Network 'wonderwhy_postgres-network' already exists."
            fi
            sudo chmod 666 /var/run/docker.sock
            docker-compose stop backend 
            docker-compose up setup -d
            docker-compose up backend -d
          EOF
        
      - name: Remove Added Security Group Rule
        run: |
          SECURITY_GROUP_ID="sg-0c78d4025e3337f81" 
          aws ec2 revoke-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${IP_ADDRESS}/32
